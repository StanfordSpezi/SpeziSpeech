#
# This source file is part of the Stanford Spezi open source project
#
# SPDX-FileCopyrightText: 2023 Stanford University and the project authors (see CONTRIBUTORS.md)
#
# SPDX-License-Identifier: MIT
#

name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  buildandtest_ios:
    name: Build and Test Swift Package iOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            artifactname: SpeziSpeech-iOS.xcresult
            resultBundle: SpeziSpeech-iOS.xcresult
          - buildConfig: Release
            artifactname: SpeziSpeech-iOS-Release.xcresult
            resultBundle: SpeziSpeech-iOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      scheme: SpeziSpeech-Package
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtest_watchos:
    name: Build and Test Swift Package watchOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            artifactname: SpeziSpeech-iOS.xcresult
            resultBundle: SpeziSpeech-iOS.xcresult
          - buildConfig: Release
            artifactname: SpeziSpeech-iOS-Release.xcresult
            resultBundle: SpeziSpeech-iOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      scheme: SpeziSpeech-Package
      destination: 'platform=watchOS Simulator,name=Apple Watch Series 9 (45mm)'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtest_visionos:
    name: Build and Test Swift Package visionOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            artifactname: SpeziSpeech-visionOS.xcresult
            resultBundle: SpeziSpeech-visionOS.xcresult
          - buildConfig: Release
            artifactname: SpeziSpeech-visionOS-Release.xcresult
            resultBundle: SpeziSpeech-visionOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      scheme: SpeziSpeech-Package
      destination: 'platform=visionOS Simulator,name=Apple Vision Pro'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtest_tvos:
    name: Build and Test Swift Package tvOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            artifactname: SpeziSpeech-visionOS.xcresult
            resultBundle: SpeziSpeech-visionOS.xcresult
          - buildConfig: Release
            artifactname: SpeziSpeech-visionOS-Release.xcresult
            resultBundle: SpeziSpeech-visionOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      scheme: SpeziSpeech-Package
      destination: 'platform=tvOS Simulator,name=Apple TV 4K (3rd generation)'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtest_macos:
    name: Build and Test Swift Package macOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            artifactname: SpeziSpeech-macOS.xcresult
            resultBundle: SpeziSpeech-macOS.xcresult
          - buildConfig: Release
            artifactname: SpeziSpeech-macOS-Release.xcresult
            resultBundle: SpeziSpeech-macOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      scheme: SpeziSpeech-Package
      destination: 'platform=macOS,arch=arm64'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtestuitests_ios:
    name: Build and Test UI Tests iOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            resultBundle: TestApp-iOS.xcresult
            artifactname: TestApp-iOS.xcresult
          - buildConfig: Release
            resultBundle: TestApp-iOS-Release.xcresult
            artifactname: TestApp-iOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      path: 'Tests/UITests'
      scheme: TestApp
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtestuitests_ipad:
    name: Build and Test UI Tests iPadOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            resultBundle: TestApp-iPad.xcresult
            artifactname: TestApp-iPad.xcresult
          - buildConfig: Release
            resultBundle: TestApp-iPad-Release.xcresult
            artifactname: TestApp-iPad-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      path: 'Tests/UITests'
      scheme: TestApp
      destination: 'platform=iOS Simulator,name=iPad Air (5th generation)'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  buildandtestuitests_visionos:
    name: Build and Test UI Tests visionOS
    uses: StanfordSpezi/.github/.github/workflows/xcodebuild-or-fastlane.yml@v2
    strategy:
      matrix:
        include:
          - buildConfig: Debug
            resultBundle: TestApp-visionOS.xcresult
            artifactname: TestApp-visionOS.xcresult
          - buildConfig: Release
            resultBundle: TestApp-visionOS-Release.xcresult
            artifactname: TestApp-visionOS-Release.xcresult
    with:
      runsonlabels: '["macOS", "self-hosted"]'
      path: 'Tests/UITests'
      scheme: TestApp
      destination: 'platform=visionOS Simulator,name=Apple Vision Pro'
      buildConfig: ${{ matrix.buildConfig }}
      resultBundle: ${{ matrix.resultBundle }}
      artifactname: ${{ matrix.artifactname }}
  uploadcoveragereport:
    name: Upload Coverage Report
    needs: [buildandtest_ios, buildandtest_visionos, buildandtest_watchos, buildandtest_macos, buildandtestuitests_ios, buildandtestuitests_ipad, buildandtestuitests_visionos]
    uses: StanfordSpezi/.github/.github/workflows/create-and-upload-coverage-report.yml@v2
    with:
      coveragereports: 'SpeziSpeech-iOS.xcresult SpeziViews-watchOS.xcresult SpeziSpeech-visionOS.xcresult buildandtest_tvos SpeziSpeech-macOS.xcresult TestApp-iOS.xcresult TestApp-iPad.xcresult TestApp-visionOS.xcresult'
